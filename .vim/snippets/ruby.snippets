# #!/usr/bin/ruby
snippet bang
	#!/usr/bin/ruby

# documentation
snippet =b
	=begin rdoc
		${1}
	=end

# control structures
snippet if
	if ${1:condition}
		${2}
	end
snippet else
	else
		${1}
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end

snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end

snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}


# classes
snippet class class .. end
	class ${1:classname}
		${2}
	end
snippet class class .. initialize .. end
	class ${1:classname}
		def initialize(${2:args})
			${3}
		end
		${4}
	end
snippet def
	def ${1:method_name}
		${2}
	end
snippet defs
	def self.${1:method_name}
		${2}
	end
snippet mod module .. end
	module ${1}
		${2}
	end

snippet ar
	attr_reader :${1:attr_names}
snippet aw
	attr_writer :${1:attr_names}
snippet arw
	attr_accessor :${1:attr_names}

snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end

snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }


# blocks
snippet t
	times { |${1:n}| ${2} }
snippet ut
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
snippet ea
	each { |${1:e}| ${2} }
snippet eawi
	each_with_index { |${1:e}, ${2:i}| ${3} }
snippet map
	map { |${1:e}| ${2} }
snippet col
	collect { |${1:e}| ${2} }
snippet bl
	{ |${1:x}| ${2} }
snippet do
	do |${1:variable}|
		${2}
	end
snippet :
	:${1:key} => ${2:"value"}${3}


# assertions
snippet as
	assert(${1:test}, "${2:Failure message.}")${3}
snippet ase
	assert_equal(${1:expected}, ${2:actual})${3}
snippet asne
	assert_not_equal(${1:unexpected}, ${2:actual})${3}
snippet asn
	assert_nil(${1:instance})${2}
snippet asnn
	assert_not_nil(${1:instance})${2}
snippet asm
	assert_match(/${1:expected_pattern}/, ${2:actual_string})${3}
snippet asnm
	assert_no_match(/${1:unexpected_pattern}/, ${2:actual_string})${3}
snippet fl
	flunk("${1:Failure message.}")${2}

# rails

# filters
snippet bf
	before_filter :${1}
snippet af
	after_filter :${1}

# redirections
snippet rep
	redirect_to ${1}_path
snippet rea
	redirect_to :action => "${1}"
snippet reai
	redirect_to :action => "${1}", :id => ${2:@item}
snippet rec
	redirect_to :controller => "${1}"
snippet reca
	redirect_to :controller => "${1}", :action => "${2:index}"
snippet recai
	redirect_to :controller => "${1}", :action => "${2:show}", :id => ${3:@item}

# rendering
snippet ra
	render :action => "${1}"
snippet ral
	render :action => "${1}", :layout => "${2:standard}"
snippet ri
	render :inline => "${1}"
snippet rn
	render :nothing => true
snippet rns
	render :nothing => true, :status => ${1}
snippet rp
	render :partial => "${1}"
snippet rt
	render :text => ${1}

# models
snippet att
	attr_accessible :${1}

# associations
snippet bt
	belongs_to ${1}
snippet ho
	has_one ${1}
snippet hm
	has_many ${1}
snippet hbm
	has_and_belongs_to_many ${1}

# finders
snippet fi
	find(${1})
snippet fib
	find_by_${1}()

# validations
snippet v
	validates :${1}
snippet va
	validates_associated ${1}, :on => :${2:create}
snippet vac
	validates_acceptance_of ${1}, :on => :${2:create}
snippet vc
	validates_confirmation_of ${1}, :on => :${2:create}, :message => "should match confirmation!"
snippet ve
	validates_exclusion_of ${1}, :in => %w( ${2:mov avi} ), :on => :${3:create}, :message => "extension %s is not allowed"
snippet vf
	validates_format_of ${1}, :with => /${2}/, :on => :${3:create}, :message => "is invalid!"
snippet vi
	validates_inclusion_of ${1}, :in => %w( ${2:mov avi} ), :on => :${3:create}, :message => "extension %s is not included in the list"
snippet vl
	validates_length_of ${1}, :within => ${2:1..100}, :on => :${3:create}, :message => "must be present!"
snippet vn
	validates_numericality_of ${1}, :on => :${2:create}, :message => "is not a number"
snippet vp
	validates_presence_of ${1}, :on => :${2:create}, :message => "can't be blank!"
snippet vu
	validates_uniqueness_of ${1}, :on => :${2:create}, :message => "must be unique"

# test
snippet test
	test "${1}" do
		${2}
	end
