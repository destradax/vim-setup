# #!/usr/bin/ruby
snippet bang
	#!/usr/bin/ruby

# documentation
snippet =b
	=begin rdoc
		${1}
	=end

# control structures
snippet if
	if ${1:condition}
		${2}
	end
snippet else
	else
		${1}
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet unless
	unless ${1:condition}
		${2}
	end

snippet while
	while ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end

snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet when
	when ${1:condition}
		${2}

snippet def
	def ${1:method_name}
		${2}
	end

# classes
snippet class class .. end
	class ${1:classname}
		${2}
	end
snippet class class .. initialize .. end
	class ${1:classname}
		def initialize(${2:args})
			${3}
		end
		${4}
	end

snippet mod module .. end
	module ${1}
		${2}
	end

snippet ar
	attr_reader :${1:attr_names}
snippet aw
	attr_writer :${1:attr_names}
snippet arw
	attr_accessor :${1:attr_names}

snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end

snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }


# blocks
snippet t
	times { |${1:n}| ${2} }
snippet ut
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
snippet ea
	each { |${1:e}| ${2} }
snippet eawi
	each_with_index { |${1:e}, ${2:i}| ${3} }
snippet map
	map { |${1:e}| ${2} }
snippet col
	collect { |${1:e}| ${2} }
snippet bl
	{ |${1:x}| ${2} }
snippet do
	do |${1:variable}|
		${2}
	end
snippet :
	:${1:key} => ${2:"value"}${3}


# assertions
snippet as
	assert(${1:test}, "${2:Failure message.}")${3}
snippet ase
	assert_equal(${1:expected}, ${2:actual})${3}
snippet asne
	assert_not_equal(${1:unexpected}, ${2:actual})${3}
snippet asn
	assert_nil(${1:instance})${2}
snippet asnn
	assert_not_nil(${1:instance})${2}
snippet asm
	assert_match(/${1:expected_pattern}/, ${2:actual_string})${3}
snippet asnm
	assert_no_match(/${1:unexpected_pattern}/, ${2:actual_string})${3}
snippet fl
	flunk("${1:Failure message.}")${2}


# rails
snippet test
	test "${1}" do
		${2}
	end
snippet hm
	has_many ${1}
